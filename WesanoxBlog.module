<?php

namespace ProcessWire;

class WesanoxBlog extends WireData implements Module, ConfigurableModule
{
    public static function getModuleInfo()
    {
        return array(
            'title' => 'wesanox Blog Tool',
            'summary' => 'A little News Tool for Processwire made by wesanox.',
            'version' => '0.1.1',
            'author' => 'Frittenfritze',
            'icon' => 'newspaper-o',
            'autoload' => true,
            'installs' => ['ProcessWesanoxBlog', 'FieldtypeDynamicOptions','WesanoxMatrixContent','WesanoxMatrixBasic'],
            'requires' => array(
                'ProcessWire>=3.0.210',
                'PHP>=8.0.0',
                'WesanoxMatrixContent>=0.0.1',
                'WesanoxMatrixBasic>=0.0.1',
            ),
        );
    }

    /**
     * @var array|string[]
     */
    protected array $external_modules = [
//        'WesanoxMatrixContent' => 'https://github.com/wesanox/WesanoxMatrixContent/archive/refs/heads/main.zip',
//        'WesanoxMatrixBasic' => 'https://github.com/wesanox/WesanoxMatrixBasic/archive/refs/heads/main.zip',
        'FieldtypeDynamicOptions' => 'https://github.com/Toutouwai/FieldtypeDynamicOptions/archive/master.zip'
    ];

    /**
     * @var Module|_Module|null $helper_classes
     * @var Module|_Module|null $helper_fields
     */
    protected Module|_Module|null $helper_fields;
    protected Module|_Module|null $helper_classes;

    /**
     * @var array $fields_array
     */
    protected array $fields_array = [];

    /**
     * @var array|string[]
     */
    protected array $template_news = [
        'news'
    ];

    protected array $options_news = [
        'options_news'
    ];

    protected array $options_generals = [
        'options_generals'
    ];

    /**
     * @throws WirePermissionException
     */
    public function __construct()
    {
        parent::__construct();

        $this->helper_classes = $this->modules->get('WesanoxHelperClasses');
        $this->helper_fields = $this->modules->get('WesanoxHelperFields');

        $this->fields_array = include $this->config->paths->WesanoxBlog . 'config/fields.php';
    }

    /**
     * install function for the module
     *
     * @return void
     * @throws WirePermissionException
     * @throws WireException
     */
    public function ___install()
    {
        /**
         * Install external modules
         */
        foreach ($this->external_modules as $module_name => $module_url) {
            if (!$this->modules->isInstalled($module_name)) {
                $message = $this->helper_classes->downloadInstall($module_name, $module_url);
                if ($message !== true) $this->error($message);
            }
        }

        /**
         * create fields
         */
        foreach ($this->fields_array as $field_array) {
            $this->helper_fields->createFields($field_array);
        }

        /**
         * create / copy the template_news.php in the templates folder
         */
        foreach($this->template_news as $template_news)
        {
            $file = $this->config->paths->WesanoxBlog . 'src/templates/template_' .  $template_news . '.php';
            $file_target = $this->config->paths->templates . 'template_' . $template_news . '.php';

            if (!is_file($file_target)) {
                $this->files->copy($file, $file_target);
            }

            /**
             * @TODO we need individual templates settings for the fields (headline, text)
             *
             * if not exists, create content only Page
             */
            if ( !$this->templates->get('template_' . $template_news) ) {
                $fg = new Fieldgroup();
                $fg->name = 'template_' . $template_news;
                $fg->add('title');
                $fg->add('dynamic_categories_news');
                $fg->add('dynamic_subcategories_news');
                $fg->add('date_news');

                $fg->add('image');
//            $fg->get('image')->set('columnWidth', 50);
//            $fg->get('image')->save();

                $fg->add('text');
//            $fg->get('text')->set('columnWidth', 50);
//            $fg->get('text')->set('label', 'Kurzbeschreibung');
//            $fg->get('text')->save();

                $fg->add('matrix_content');
                $fg->save();

                $t = new Template();
                $t->name = 'template_' . $template_news;
                $t->label = 'News';
                $t->fieldgroup = $fg;
                $t->icon = 'Newspaper-o';
                $t->tags = 'Templates';
                $t->save();
            } else {
                $fg = $this->fieldgroups->get('template_' . $template_news);
                $fg->add('dynamic_categories_news');
                $fg->add('dynamic_subcategories_news');
                $fg->add('date_news');

                $fg->add('image');
//            $tn->get('image')->set('columnWidth', 50);
//            $tn->get('image')->save();

                $fg->add('text');
//            $tn->get('text')->set('columnWidth', 50);
//            $tn->get('text')->set('label', 'Kurzbeschreibung');
//            $tn->get('text')->save();

                $fg->add('matrix_content');
                $fg->save();
            }
        }

        foreach($this->options_generals as $options_generals)
        {
            /**
             * if not exists, create settings Page
             */
            if ( !$this->templates->get($options_generals) ) {
                $op = new Template();
                $op->name = $options_generals;
                $op->label = 'Einstellungen';
                $op->fieldgroup = $fg;
                $op->icon = 'cogs';
                $op->tags = 'Options';
                $op->noParents = -1;
                $op->save();
            }
        }

        foreach($this->options_news as $options_news)
        {
            /**
             * if not exists, create settings news Page or add new Fields
             * to the settingsnewspage
             */
            if ( !$this->templates->get($options_news) ) {
                $fg = new Fieldgroup();
                $fg->name = $options_news;
                $fg->add('title');
                $fg->add('matrix_basic');
                $fg->add('tab_news');
                $fg->add('repeater_categories_news');
                $fg->add('tab_news_END');
                $fg->save();

                $t = new Template();
                $t->name = $options_news;
                $t->label = 'News Einstellungen';
                $t->fieldgroup = $fg;
                $t->icon = 'cogs';
                $t->tags = 'Options';
                $t->noParents = -1;
                $t->save();
            } else {
                $fg = $this->fieldgroups->get($options_news);
                $fg->add('matrix_basic');
                $fg->add('tab_news');
                $fg->add('repeater_categories_news');
                $fg->add('tab_news_END');
                $fg->save();
            }

            $np = new Page();
            $np->template = $options_news;
            $np->parent = $this->pages->get('template=options_generals');
            $np->title = 'News Einstellungen';
            $np->name = 'options-news';
            $np->save();
        }
    }

    /**
     * uninstall function for the modul
     *
     * @return void
     * @throws WireException
     */
    public function ___uninstall()
    {
        /**
         * remove the settings page
         */
        if($this->pages->get('name=options-news')) {
            $this->pages->get('name=options-news')->delete();
        }

        /**
         * remove fields from news page
         */
        foreach($this->template_news as $template_news)
        {
            /**
             * delete template files
             */
            $file = $this->config->paths->templates . 'template=' . $template_news . '.php';

            if (is_file($file)) {
                $this->files->unlink($file);
            }

            $p = $this->pages->get('template=' . $template_news);
            $p->delete();

            if($this->templates->get('template_' . $template_news)) {
                $fg = $this->fieldgroups->get('template_' . $template_news);
                $fg->deleteAll();
                $fg->save();

                $this->templates->delete($this->templates->get('template_' . $template_news));
            }
        }

        foreach ($this->options_news as $options_news)
        {
            /**
             * delete template files
             */
            if($this->templates->get($options_news)) {
                $fg = $this->fieldgroups->get($options_news);
                $fg->deleteAll();
                $fg->save();

                $this->templates->delete($this->templates->get($options_news));
            }
        }


        /**
         * delete fields
         */
        $this->helper_fields->deleteFields($this->fields_array);
    }

    /**
     * Modul-Konfiguration
     */
    public static function getModuleConfigInputfields(array $data) : InputfieldWrapper
    {
        $inputfields = new InputfieldWrapper();

        /**
         * Represents a variable named $f.
         *
         * The purpose and type of this variable should be defined
         * based on its usage in the application. Ensure that
         * adequate context is provided where this variable is utilized.
         */
//        $f = wire('modules')->get('InputfieldCheckbox');
//        $f->name = 'remove_language_modules';
//        $f->label = __('Sprachmodule beim Deinstallieren automatisch entfernen');
//        $f->description = __('Achtung: Diese Option entfernt SprachunterstÃ¼tzung dauerhaft.');
//        $f->value = 1;
//        $f->columnWidth = 50;
//        $f->checked = !empty($data['remove_language_modules']);
//        $inputfields->add($f);
//
//        $f = wire('modules')->get('InputfieldCheckbox');
//        $f->name = 'easy_language';
//        $f->label = __('Sprache "Einfache Sprache" hinzufÃ¼gen');
//        $f->description = __('FÃ¼gt eine neue Sprache mit dem Namen "einfache-sprache" hinzu.');
//        $f->value = 1;
//        $f->columnWidth = 50;
//        $f->checked = !empty($data['easy_language']);
//        $inputfields->add($f);

        return $inputfields;
    }

    /**
     * @return void
     */
    public function ready() : void
    {
        $this->addHookAfter('FieldtypeDynamicOptions::getSelectableOptions', $this, 'provideDynamicCategoriesNews');
        $this->addHookAfter('FieldtypeDynamicOptions::getSelectableOptions', $this, 'provideDynamicSubcategoriesNews');
    }

    /**
     * @param HookEvent $event
     * @return void
     */
    public function provideDynamicCategoriesNews(HookEvent $event) : void
    {
        $field = $event->arguments(1);

        if ($field->name === 'dynamic_categories_news') {
            foreach($this->options_news as $options_news) {
                $settingsPage = $this->pages->get('template=' . $options_news);
                $options = [];

                if($settingsPage->repeater_categories_news) {
                    foreach ($settingsPage->repeater_categories_news as $cat) {
                        if (!$cat->checkbox_subcategory) {
                            $options[$cat->id] = $cat->headline;
                        }
                    }
                }

                $event->return = $options;
            }
        }
    }

    /**
     * @param HookEvent $event
     * @return void
     */
    public function provideDynamicSubcategoriesNews(HookEvent $event) : void
    {
        $field = $event->arguments(1);

        if ($field->name === 'dynamic_subcategories_news') {
            foreach($this->options_news as $options_news) {
                $settingsPage = $this->pages->get('template=' . $options_news);
                $options = [];

                if ($settingsPage->repeater_categories_news) {
                    foreach ($settingsPage->repeater_categories_news as $cat) {
                        if ($cat->checkbox_subcategory) {
                            $options[$cat->id] = $cat->headline;
                        }
                    }
                }


                $event->return = $options;
            }

        }
    }
}